import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Shuffle } from "lucide-react";

interface PuzzleGameProps {
  difficulty: number;
  onGameWin: () => void;
}

// –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
const symbols = [
  'üöÄ', 'üåü', 'üåà', 'üåô', 'üî•', 'üåä', 'üåç', 'ü¶Ñ',
  'üêò', 'ü¶Å', 'ü¶ã', 'üê¨', 'üå∫', 'üçÑ', 'üçé', 'üéØ',
  'üé®', 'üé≠', 'üéÆ', '‚öΩ', 'üèÜ', 'üíé', '‚è∞', 'üìö',
  'üîç', 'üß©', 'üéµ', 'üé™', 'üß†', '‚ù§Ô∏è', 'üîë', 'üåû',
];

export const PuzzleGame = ({ difficulty, onGameWin }: PuzzleGameProps) => {
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–æ—Ç 4 –¥–æ 12)
  const pairsCount = 4 + (difficulty - 1) * 2;
  
  const [cards, setCards] = useState<Array<{
    id: number;
    symbol: string;
    isFlipped: boolean;
    isMatched: boolean;
  }>>([]);
  
  const [flippedCards, setFlippedCards] = useState<number[]>([]);
  const [isChecking, setIsChecking] = useState(false);
  const [moveCount, setMoveCount] = useState(0);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    initializeGame();
  }, [difficulty]);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
  useEffect(() => {
    if (cards.length > 0 && cards.every(card => card.isMatched)) {
      onGameWin();
    }
  }, [cards, onGameWin]);
  
  const initializeGame = () => {
    // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const selectedSymbols = symbols.slice(0, pairsCount);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
    let cardPairs: Array<{
      id: number;
      symbol: string;
      isFlipped: boolean;
      isMatched: boolean;
    }> = [];
    
    selectedSymbols.forEach((symbol, index) => {
      cardPairs.push(
        { id: index * 2, symbol, isFlipped: false, isMatched: false },
        { id: index * 2 + 1, symbol, isFlipped: false, isMatched: false }
      );
    });
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    cardPairs = shuffleCards(cardPairs);
    
    setCards(cardPairs);
    setFlippedCards([]);
    setMoveCount(0);
  };
  
  const shuffleCards = (cardsArray: any[]) => {
    const shuffled = [...cardsArray];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };
  
  const handleCardClick = (id: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –Ω–µ —Å–æ–≤–ø–∞–ª–∞
    const card = cards.find(c => c.id === id);
    if (isChecking || !card || card.isFlipped || card.isMatched || flippedCards.length >= 2) {
      return;
    }
    
    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    const updatedCards = cards.map(card => 
      card.id === id ? { ...card, isFlipped: true } : card
    );
    
    setCards(updatedCards);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–º
    const updatedFlippedCards = [...flippedCards, id];
    setFlippedCards(updatedFlippedCards);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (updatedFlippedCards.length === 2) {
      setIsChecking(true);
      setMoveCount(prev => prev + 1);
      
      setTimeout(() => {
        checkForMatch(updatedFlippedCards);
        setIsChecking(false);
      }, 800);
    }
  };
  
  const checkForMatch = (flippedCardIds: number[]) => {
    const [firstId, secondId] = flippedCardIds;
    const firstCard = cards.find(card => card.id === firstId);
    const secondCard = cards.find(card => card.id === secondId);
    
    if (firstCard && secondCard && firstCard.symbol === secondCard.symbol) {
      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ —Å–æ–≤–ø–∞–≤—à–∏–µ
      setCards(cards.map(card => 
        card.id === firstId || card.id === secondId
          ? { ...card, isMatched: true }
          : card
      ));
    } else {
      // –ù–µ —Å–æ–≤–ø–∞–ª–∏ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      setCards(cards.map(card => 
        card.id === firstId || card.id === secondId
          ? { ...card, isFlipped: false }
          : card
      ));
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    setFlippedCards([]);
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getGridClass = () => {
    switch (pairsCount) {
      case 4: return "grid-cols-4";
      case 6: return "grid-cols-4";
      case 8: return "grid-cols-4";
      case 10: return "grid-cols-5";
      case 12: return "grid-cols-6";
      default: return "grid-cols-4";
    }
  };
  
  return (
    <div className="w-full max-w-3xl">
      <div className="flex justify-between items-center mb-4">
        <div className="text-gray-700 font-medium">
          –•–æ–¥–æ–≤: <span className="font-bold">{moveCount}</span>
        </div>
        <Button 
          variant="outline"
          size="sm"
          onClick={initializeGame}
          className="flex items-center space-x-1"
        >
          <Shuffle className="w-4 h-4" />
          <span>–ü–µ—Ä–µ–º–µ—à–∞—Ç—å</span>
        </Button>
      </div>
      
      <div className={`grid ${getGridClass()} gap-2 sm:gap-4`}>
        {cards.map(card => (
          <Card 
            key={card.id}
            className={`aspect-square flex items-center justify-center cursor-pointer text-3xl sm:text-4xl transition-all duration-300 ${
              card.isFlipped || card.isMatched 
                ? "bg-white" 
                : "bg-indigo-600 text-transparent hover:bg-indigo-700"
            } ${
              card.isMatched ? "opacity-70" : "opacity-100"
            }`}
            onClick={() => handleCardClick(card.id)}
          >
            {card.isFlipped || card.isMatched ? card.symbol : "?"}
          </Card>
        ))}
      </div>
    </div>
  );
};
